services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    develop:
      watch:
        - path: ./src/**/*.ts
          action: sync+restart
          target: /app/src
        - path: ./package.json
          action: rebuild
        - path: ./bun.lock
          action: rebuild
    networks:
      - internal_network

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - internal_network

  ngrok:
    image: ngrok/ngrok:alpine
    ports:
      - "4040:4040"
    command:
      - "http"
      - "--domain=fond-upright-ocelot.ngrok-free.app"
      - "app:3000"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    networks:
      - internal_network
    depends_on:
      app:
        condition: service_healthy
volumes:
  postgres_data:

networks:
  internal_network:
    driver: bridge
